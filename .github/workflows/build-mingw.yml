name: Windows CI (mingw)

on: [push, pull_request]

jobs:
  build-mingw:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows (mingw32),  os: windows-latest, shell: 'msys2 {0}', msystem: mingw32, msys-env: mingw-w64-i686, makefile: Makefile.w32, rust-target: i686-pc-windows-gnu }
        - { name: Windows (mingw64),  os: windows-latest, shell: 'msys2 {0}', msystem: mingw64, msys-env: mingw-w64-x86_64, makefile: Makefile.w64, rust-target: x86_64-pc-windows-gnu }

    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.platform.msystem }}
        path-type: inherit
        install: base-devel
          ${{ matrix.platform.msys-env }}-gcc
          ${{ matrix.platform.msys-env }}-glslang

    - uses: actions/checkout@v4

    - name: Set up cargo cache
      uses: actions/cache@v3
      continue-on-error: false
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          rust/target/
        key: ${{ runner.os }}-${{ matrix.platform.msystem }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.platform.msystem }}-cargo-
    - name: Add Rust target
      run: rustup target add ${{ matrix.platform.rust-target }}

    - name: Build MinGW
      run: |
        set -eu
        parallel="$(getconf _NPROCESSORS_ONLN)"
        make -j"${parallel}" -C Quake -f ${{ matrix.platform.makefile }}
    - name: Upload vkQuake
      uses: actions/upload-artifact@v4
      with:
        name: vkQuake archive (${{ matrix.platform.msystem }})
        path: |
            Quake/*.exe
            Quake/*.dll
